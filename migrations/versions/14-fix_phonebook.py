"""fix-phonebook

Revision ID: 6df7fb89081d
Revises: e3d06397960d
Create Date: 2024-04-11 00:44:52.049956

"""

from collections.abc import Sequence
from enum import Enum
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "6df7fb89081d"
down_revision: str | None = "fce1716123e2"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


class Kinds(Enum):
    comity = "Comité"
    section_ae = "Section AE"
    club_ae = "Club AE"
    section_use = "Section USE"
    club_use = "Club USE"
    association_independant = "Asso indé"


class RoleTags(Enum):
    president = "Prez'"
    sg = "SG"
    treso = "Trez'"
    resp_co = "Respo Com'"
    resp_part = "Respo Partenariats"


def define_order_of_memberships(memberships) -> list[list]:
    """
    Use tag systeme to introduce a coherent member_order to older membership
    """
    member_order = [tag.value for tag in RoleTags]
    member_order.append("Default")
    memberships2 = []
    for membership in memberships:
        if membership[2]:
            tags = membership[2].split(";")
            tags.sort(key=lambda x: member_order.index(x))
        else:
            tags = ["Default"]
        memberships2.append(
            [
                membership[0],
                membership[1],
                tags,
                membership[3],
            ],
        )
    memberships2.sort(
        key=lambda x: (
            min([member_order.index(tag) for tag in x[2]]),
            len(x[2]),
            x[1],
        ),
    )
    return memberships2


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "phonebook_membership",
        sa.Column("member_order", sa.Integer(), nullable=False, server_default="0"),
    )
    t_association = sa.Table(
        "phonebook_association",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("name", sa.String()),
        sa.Column("kind", sa.Enum(Kinds)),
        sa.Column("mandate_year", sa.Integer()),
    )

    t_membership = sa.Table(
        "phonebook_membership",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("association_id", sa.String()),
        sa.Column("mandate_year", sa.Integer()),
        sa.Column("role_name", sa.String()),
        sa.Column("role_tags", sa.String()),
        sa.Column("member_order", sa.Integer()),
    )

    conn = op.get_bind()
    res = conn.execute(
        sa.select(t_association.c.id, t_association.c.mandate_year),
    ).fetchall()
    for id_, _ in res:
        memberships = conn.execute(
            sa.select(
                t_membership.c.id,
                t_membership.c.role_name,
                t_membership.c.role_tags,
                t_membership.c.mandate_year,
            ).where(
                t_membership.c.association_id == id_,
            ),
        ).fetchall()
        years = {m[3] for m in memberships}
        for year in years:
            memberships_year = [m for m in memberships if m[3] == year]
            sorted_memberships_year = define_order_of_memberships(memberships_year)
            for i, m in enumerate(sorted_memberships_year):
                conn.execute(
                    t_membership.update()
                    .where(t_membership.c.id == m[0])
                    .values(member_order=i),
                )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("phonebook_membership", "member_order")
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    alembic_runner.insert_into(
        "phonebook_membership",
        {
            "id": "16c363bc-c71f-4eae-8376-c37712a312f6",
            "user_id": "26c363bc-c71f-4eae-8376-c37712a312f6",
            "association_id": "36c363bc-c71f-4eae-8376-c37712a312f6",
            "mandate_year": 2024,
            "role_name": "role_name",
            "role_tags": "Prez'",
        },
    )
    alembic_runner.insert_into(
        "phonebook_membership",
        {
            "id": "86c363bc-c71f-4eae-8376-c37712a312f6",
            "user_id": "96c363bc-c71f-4eae-8376-c37712a312f6",
            "association_id": "36c363bc-c71f-4eae-8376-c37712a312f6",
            "mandate_year": 2024,
            "role_name": "role_name",
            "role_tags": "Respo Com'",
        },
    )
    alembic_runner.insert_into(
        "phonebook_membership",
        {
            "id": "46c363bc-c71f-4eae-8376-c37712a312f6",
            "user_id": "56c363bc-c71f-4eae-8376-c37712a312f6",
            "association_id": "36c363bc-c71f-4eae-8376-c37712a312f6",
            "mandate_year": 2024,
            "role_name": "role_name",
            "role_tags": "SG",
        },
    )
    alembic_runner.insert_into(
        "phonebook_membership",
        {
            "id": "66c363bc-c71f-4eae-8376-c37712a312f6",
            "user_id": "76c363bc-c71f-4eae-8376-c37712a312f6",
            "association_id": "36c363bc-c71f-4eae-8376-c37712a312f6",
            "mandate_year": 2024,
            "role_name": "role_name",
            "role_tags": "Trez'",
        },
    )
    alembic_runner.insert_into(
        "phonebook_membership",
        {
            "id": "b6c363bc-c71f-4eae-8376-c37712a312f6",
            "user_id": "a6c363bc-c71f-4eae-8376-c37712a312f6",
            "association_id": "36c363bc-c71f-4eae-8376-c37712a312f6",
            "mandate_year": 2024,
            "role_name": "role_name",
            "role_tags": "",
        },
    )
    alembic_runner.insert_into(
        "phonebook_membership",
        {
            "id": "d6c363bc-c71f-4eae-8376-c37712a312f6",
            "user_id": "a6c363bc-c71f-4eae-8376-c37712a312f6",
            "association_id": "c6c363bc-c71f-4eae-8376-c37712a312f6",
            "mandate_year": 2024,
            "role_name": "role_name",
            "role_tags": "Prez';Trez'",
        },
    )
    alembic_runner.insert_into(
        "phonebook_membership",
        {
            "id": "e6c363bc-c71f-4eae-8376-c37712a312f6",
            "user_id": "96c363bc-c71f-4eae-8376-c37712a312f6",
            "association_id": "c6c363bc-c71f-4eae-8376-c37712a312f6",
            "mandate_year": 2024,
            "role_name": "role_name",
            "role_tags": "",
        },
    )
    alembic_runner.insert_into(
        "phonebook_association",
        {
            "id": "36c363bc-c71f-4eae-8376-c37712a312f6",
            "name": "name",
            "kind": "comity",
            "mandate_year": 2024,
        },
    )
    alembic_runner.insert_into(
        "phonebook_association",
        {
            "id": "c6c363bc-c71f-4eae-8376-c37712a312f6",
            "name": "name",
            "kind": "comity",
            "mandate_year": 2024,
        },
    )


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    rows = alembic_connection.execute(
        sa.text("SELECT id, member_order from phonebook_membership"),
    ).fetchall()

    solutions = [
        ("16c363bc-c71f-4eae-8376-c37712a312f6", 0),
        ("46c363bc-c71f-4eae-8376-c37712a312f6", 1),
        ("66c363bc-c71f-4eae-8376-c37712a312f6", 2),
        ("86c363bc-c71f-4eae-8376-c37712a312f6", 3),
        ("b6c363bc-c71f-4eae-8376-c37712a312f6", 4),
        ("d6c363bc-c71f-4eae-8376-c37712a312f6", 0),
        ("e6c363bc-c71f-4eae-8376-c37712a312f6", 1),
    ]

    for solution in solutions:
        assert solution in rows
