"""empty message

Create Date: 2024-05-21 10:46:56.986885
"""

from collections.abc import Sequence
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "1dadc35d79a5"
down_revision: str | None = "146039b64c92"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("payment_checkout", sa.Column("secret", sa.String(), nullable=False))
    with op.batch_alter_table("payment_checkout_payment") as batch_op:
        batch_op.alter_column(
            "hello_asso_payment_id",
            existing_type=sa.VARCHAR(),
            type_=sa.Integer(),
            existing_nullable=False,
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("payment_checkout", "secret")
    with op.batch_alter_table("payment_checkout_payment") as batch_op:
        batch_op.alter_column(
            "hello_asso_payment_id",
            existing_type=sa.Integer(),
            type_=sa.VARCHAR(),
            existing_nullable=False,
        )
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
