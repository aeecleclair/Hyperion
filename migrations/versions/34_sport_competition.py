"""sport_competition

Create Date: 2025-06-04 19:45:18.373071
"""

from collections.abc import Sequence
from enum import Enum
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op

from app.types.sqlalchemy import TZDateTime

# revision identifiers, used by Alembic.
revision: str = "0f66a87dc3ce"
down_revision: str | None = "ea26eebe3f8d"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


class SportCategory(Enum):
    masculine = "masculine"
    feminine = "feminine"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "competition_edition",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("start_date", TZDateTime(), nullable=False),
        sa.Column("end_date", TZDateTime(), nullable=False),
        sa.Column("activated", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_group",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "competition_sport",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("activated", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("team_size", sa.Integer(), nullable=False),
        sa.Column("substitute_max", sa.Integer(), nullable=True),
        sa.Column(
            "sport_category",
            sa.Enum(SportCategory, name="sportcategory"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_school_extension",
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("from_lyon", sa.Boolean(), nullable=False),
        sa.Column("activated", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["school_id"], ["core_school.id"]),
        sa.PrimaryKeyConstraint("school_id"),
    )
    op.create_table(
        "competition_annual_group_membership",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("group_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(["group_id"], ["competition_group.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["core_user.id"]),
        sa.PrimaryKeyConstraint("user_id", "group_id", "edition_id"),
    )
    op.create_table(
        "competition_school_general_quota",
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("athlete_quota", sa.Integer(), nullable=True),
        sa.Column("cameraman_quota", sa.Integer(), nullable=True),
        sa.Column("pompom_quota", sa.Integer(), nullable=True),
        sa.Column("fanfare_quota", sa.Integer(), nullable=True),
        sa.Column("non_athlete_quota", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.PrimaryKeyConstraint("school_id", "edition_id"),
    )
    op.create_table(
        "competition_sport_quota",
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("participant_quota", sa.Integer(), nullable=False),
        sa.Column("team_quota", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.PrimaryKeyConstraint("sport_id", "school_id", "edition_id"),
    )
    op.create_table(
        "competition_team",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("captain_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["captain_id"], ["core_user.id"]),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_match",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("team1_id", sa.Uuid(), nullable=False),
        sa.Column("team2_id", sa.Uuid(), nullable=False),
        sa.Column("date", TZDateTime(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("score_team1", sa.Integer(), nullable=True),
        sa.Column("score_team2", sa.Integer(), nullable=True),
        sa.Column("winner_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.ForeignKeyConstraint(["team1_id"], ["competition_team.id"]),
        sa.ForeignKeyConstraint(["team2_id"], ["competition_team.id"]),
        sa.ForeignKeyConstraint(["winner_id"], ["competition_team.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_participant",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("team_id", sa.Uuid(), nullable=True),
        sa.Column("substitute", sa.Boolean(), nullable=False),
        sa.Column("license", sa.String(), nullable=False),
        sa.Column("validated", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.ForeignKeyConstraint(["team_id"], ["competition_team.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["core_user.id"]),
        sa.PrimaryKeyConstraint("user_id", "sport_id", "edition_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("competition_participant")
    op.drop_table("competition_match")
    op.drop_table("competition_team")
    op.drop_table("competition_sport_quota")
    op.drop_table("competition_school_general_quota")
    op.drop_table("competition_annual_group_membership")
    op.drop_table("competition_school_extension")
    op.drop_table("competition_sport")
    op.drop_table("competition_group")
    op.drop_table("competition_edition")
    sa.Enum(SportCategory, name="sportcategory").drop(op.get_bind())
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
