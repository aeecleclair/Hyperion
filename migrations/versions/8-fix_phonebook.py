"""fix-phonebook

Revision ID: 6df7fb89081d
Revises: e3d06397960d
Create Date: 2024-04-11 00:44:52.049956

"""

from collections.abc import Sequence
from enum import Enum

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "6df7fb89081d"
down_revision: str | None = "e3d06397960d"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


class Kinds(Enum):
    comity = "Comité"
    section_ae = "Section AE"
    club_ae = "Club AE"
    section_use = "Section USE"
    club_use = "Club USE"
    association_independant = "Asso indé"


class RoleTags(Enum):
    president = "Prez'"
    sg = "SG"
    treso = "Trez'"
    resp_co = "Respo Com'"
    resp_part = "Respo Partenariats"


def define_order_of_memberships(memberships) -> list[list]:
    order = [tag.value for tag in RoleTags]
    order.append("Default")
    memberships2 = []
    for membership in memberships:
        if membership[2]:
            tags = membership[2].split(";")
            tags.sort(key=lambda x: order.index(x))
        else:
            tags = []
        memberships2.append(
            [
                membership[0],
                membership[1],
                tags,
                membership[3],
            ],
        )
    memberships2.sort(
        key=lambda x: (min([order.index(tag) for tag in x[2]]), len(x[2]), x[1]),
    )
    return memberships2


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "phonebook_membership",
        sa.Column("order", sa.Integer(), nullable=False, server_default="0"),
    )
    t_association = sa.Table(
        "phonebook_association",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("name", sa.String()),
        sa.Column("kind", sa.Enum(Kinds)),
        sa.Column("mandate_year", sa.Integer()),
    )

    t_membership = sa.Table(
        "phonebook_membership",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("association_id", sa.String()),
        sa.Column("mandate_year", sa.Integer()),
        sa.Column("role_name", sa.String()),
        sa.Column("role_tags", sa.String()),
        sa.Column("order", sa.Integer()),
    )

    conn = op.get_bind()
    res = conn.execute(
        sa.select(t_association.c.id, t_association.c.mandate_year),
    ).fetchall()
    for id_, _ in res:
        memberships = conn.execute(
            sa.select(
                t_membership.c.id,
                t_membership.c.role_name,
                t_membership.c.role_tags,
                t_membership.c.mandate_year,
            ).where(
                t_membership.c.association_id == id_,
            ),
        ).fetchall()
        years = {m[3] for m in memberships}
        for year in years:
            memberships_year = [m for m in memberships if m[3] == year]
            sorted_memberships_year = define_order_of_memberships(memberships_year)
            for i, m in enumerate(sorted_memberships_year):
                conn.execute(
                    t_membership.update()
                    .where(t_membership.c.id == m[0])
                    .values(order=i),
                )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("phonebook_membership", "order")
    # ### end Alembic commands ###
