"""sport_competition

Create Date: 2025-06-04 19:45:18.373071
"""

from collections.abc import Sequence
from enum import Enum
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op

from app.types.sqlalchemy import TZDateTime

# revision identifiers, used by Alembic.
revision: str = "0f66a87dc3ce"
down_revision: str | None = "d14266761430"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


class SportCategory(Enum):
    masculine = "masculine"
    feminine = "feminine"


class AccountType(Enum):
    student = "student"
    former_student = "former_student"
    staff = "staff"
    association = "association"
    external = "external"
    other_school_student = "other_school_student"
    demo = "demo"


class CompetitionGroupType(Enum):
    sport_manager = "sport_manager"
    schools_bds = "schools_bds"


class ProductPublicType(Enum):
    pompom = "pompom"
    fanfare = "fanfare"
    cameraman = "cameraman"
    athlete = "athlete"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        f"ALTER TYPE accounttype ADD VALUE IF NOT EXISTS '{AccountType.other_school_student.value}';",
    )

    op.create_table(
        "competition_edition",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("start_date", TZDateTime(), nullable=False),
        sa.Column("end_date", TZDateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("inscription_enabled", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_user",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column(
            "sport_category",
            sa.Enum(SportCategory, name="sportcategory"),
            nullable=True,
        ),
        sa.Column("validated", sa.Boolean(), nullable=False),
        sa.Column("created_at", TZDateTime(), nullable=False),
        sa.Column("is_pompom", sa.Boolean(), nullable=False, server_default="false"),
        sa.Column("is_fanfare", sa.Boolean(), nullable=False, server_default="false"),
        sa.Column("is_cameraman", sa.Boolean(), nullable=False, server_default="false"),
        sa.Column("is_athlete", sa.Boolean(), nullable=False, server_default="false"),
        sa.Column("is_volunteer", sa.Boolean(), nullable=False, server_default="false"),
        sa.ForeignKeyConstraint(["user_id"], ["core_user.id"]),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.PrimaryKeyConstraint("user_id", "edition_id"),
    )
    op.create_table(
        "competition_sport",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("team_size", sa.Integer(), nullable=False),
        sa.Column("substitute_max", sa.Integer(), nullable=True),
        sa.Column(
            "sport_category",
            sa.Enum(SportCategory, name="sportcategory"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_school_extension",
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("from_lyon", sa.Boolean(), nullable=False),
        sa.Column("ffsu_id", sa.String(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("inscription_enabled", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["school_id"], ["core_school.id"]),
        sa.PrimaryKeyConstraint("school_id"),
    )
    op.create_table(
        "competition_group_membership",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column(
            "group",
            sa.Enum(CompetitionGroupType, name="competitiongrouptype"),
            nullable=False,
        ),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["core_user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "group", "edition_id"),
    )
    op.create_table(
        "competition_school_general_quota",
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("athlete_quota", sa.Integer(), nullable=True),
        sa.Column("cameraman_quota", sa.Integer(), nullable=True),
        sa.Column("pompom_quota", sa.Integer(), nullable=True),
        sa.Column("fanfare_quota", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.PrimaryKeyConstraint("school_id", "edition_id"),
    )
    op.create_table(
        "competition_sport_quota",
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("participant_quota", sa.Integer(), nullable=True),
        sa.Column("team_quota", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.PrimaryKeyConstraint("sport_id", "school_id", "edition_id"),
    )
    op.create_table(
        "competition_team",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("captain_id", sa.String(), nullable=False),
        sa.Column("created_at", TZDateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["captain_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
        ),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_location",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=True),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
    )
    op.create_table(
        "competition_match",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("team1_id", sa.Uuid(), nullable=False),
        sa.Column("team2_id", sa.Uuid(), nullable=False),
        sa.Column("date", TZDateTime(), nullable=True),
        sa.Column("location_id", sa.Uuid(), nullable=False),
        sa.Column("score_team1", sa.Integer(), nullable=True),
        sa.Column("score_team2", sa.Integer(), nullable=True),
        sa.Column("winner_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.ForeignKeyConstraint(["team1_id"], ["competition_team.id"]),
        sa.ForeignKeyConstraint(["team2_id"], ["competition_team.id"]),
        sa.ForeignKeyConstraint(["winner_id"], ["competition_team.id"]),
        sa.ForeignKeyConstraint(["location_id"], ["competition_location.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_participant",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("team_id", sa.Uuid(), nullable=True),
        sa.Column("substitute", sa.Boolean(), nullable=False),
        sa.Column("license", sa.String(), nullable=True),
        sa.Column("is_licence_valid", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.ForeignKeyConstraint(["sport_id"], ["competition_sport.id"]),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.ForeignKeyConstraint(["team_id"], ["competition_team.id"]),
        sa.ForeignKeyConstraint(
            ["user_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "sport_id", "edition_id"),
    )
    op.create_table(
        "competition_sport_podium",
        sa.Column("sport_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("first_place_points", sa.Integer(), nullable=False),
        sa.Column("second_place_points", sa.Integer(), nullable=False),
        sa.Column("third_place_points", sa.Integer(), nullable=False),
        sa.Column("team1_id", sa.Uuid(), nullable=True),
        sa.Column("team2_id", sa.Uuid(), nullable=True),
        sa.Column("team3_id", sa.Uuid(), nullable=True),
        sa.Column("user1_id", sa.String(), nullable=True),
        sa.Column("user2_id", sa.String(), nullable=True),
        sa.Column("user3_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["edition_id"],
            ["competition_edition.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sport_id"],
            ["competition_sport.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team1_id"],
            ["competition_team.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team2_id"],
            ["competition_team.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team3_id"],
            ["competition_team.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user1_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user2_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user3_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
        ),
        sa.PrimaryKeyConstraint("sport_id", "edition_id"),
    )
    op.create_table(
        "competition_product",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.ForeignKeyConstraint(
            ["edition_id"],
            ["competition_edition.id"],
        ),
    )
    op.create_table(
        "competition_product_variant",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("product_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("unique", sa.Boolean(), nullable=False),
        sa.Column(
            "public_type",
            sa.Enum(ProductPublicType, name="productpublictype"),
            nullable=True,
        ),
        sa.Column("description", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["competition_product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_payment",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("total", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
        ),
        sa.ForeignKeyConstraint(
            ["edition_id"],
            ["competition_edition.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_purchase",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("product_variant_id", sa.Uuid(), nullable=False),
        sa.Column("validated", sa.Boolean(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("purchased_on", TZDateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_variant_id"],
            ["competition_product_variant.id"],
        ),
        sa.ForeignKeyConstraint(
            ["edition_id"],
            ["competition_edition.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "product_variant_id"),
    )
    op.create_table(
        "competition_checkout",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("checkout_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["checkout_id"],
            ["payment_checkout.id"],
        ),
        sa.ForeignKeyConstraint(
            ["edition_id"],
            ["competition_edition.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["core_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_school_product_quota",
        sa.Column("product_id", sa.Uuid(), nullable=False),
        sa.Column("school_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("quota", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["edition_id"],
            ["competition_edition.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["competition_product.id"],
        ),
        sa.ForeignKeyConstraint(
            ["school_id"],
            ["competition_school_extension.school_id"],
        ),
        sa.PrimaryKeyConstraint("product_id", "school_id", "edition_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("competition_school_product_quota")
    op.drop_table("competition_checkout")
    op.drop_table("competition_purchase")
    op.drop_table("competition_payment")
    op.drop_table("competition_product_variant")
    op.drop_table("competition_product")
    op.drop_table("competition_sport_podium")
    op.drop_table("competition_participant")
    op.drop_table("competition_match")
    op.drop_table("competition_location")
    op.drop_table("competition_team")
    op.drop_table("competition_sport_quota")
    op.drop_table("competition_school_general_quota")
    op.drop_table("competition_group_membership")
    op.drop_table("competition_school_extension")
    op.drop_table("competition_sport")
    op.drop_table("competition_user")
    op.drop_table("competition_edition")
    sa.Enum(SportCategory, name="sportcategory").drop(op.get_bind())
    sa.Enum(CompetitionGroupType, name="competitiongrouptype").drop(op.get_bind())
    sa.Enum(ProductPublicType, name="productpublictype").drop(op.get_bind())
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
