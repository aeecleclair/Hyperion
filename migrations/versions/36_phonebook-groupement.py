"""phonebook

Create Date: 2025-06-26 01:04:23.300580
"""

from collections.abc import Sequence
from enum import Enum
from typing import TYPE_CHECKING
from uuid import UUID, uuid4

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e81453aa7341"
down_revision: str | None = "7da0e98a9e32"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


class Kinds(Enum):
    comity = "Comité"
    section_ae = "Section AE"
    club_ae = "Club AE"
    section_use = "Section USE"
    club_use = "Club USE"
    association_independant = "Asso indé"


groupement_table = sa.Table(
    "phonebook_association_groupement",
    sa.MetaData(),
    sa.Column("id", sa.UUID(), primary_key=True),
    sa.Column("name", sa.String(), nullable=False),
)

association_table = sa.Table(
    "phonebook_association",
    sa.MetaData(),
    sa.Column("id", sa.String(), primary_key=True, index=True),
    sa.Column("name", sa.String(), index=True, nullable=False),
    sa.Column("kind", sa.Enum(Kinds), nullable=False),
    sa.Column("groupement_id", sa.UUID(), nullable=True),
)

kind_ids = [
    UUID("9943fcec-464d-4d72-8ab1-f8bdf0b1f589"),
    UUID("d9d79f17-3758-499d-8cae-7a8de13629b7"),
    UUID("11ce0837-b3d0-419d-9716-ea4b6af9c149"),
    UUID("22535f41-4a38-4c01-9747-7a34a93b0232"),
    UUID("0871f672-f4ff-42e5-9e3f-570b1f10e59f"),
    UUID("2410624f-e659-44e8-9fbd-6fd2e961333c"),
]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "phonebook_association_groupement",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_phonebook_association_groupement_name"),
        "phonebook_association_groupement",
        ["name"],
        unique=True,
    )
    for i, kind in enumerate(Kinds):
        op.execute(
            sa.insert(groupement_table).values(
                {"id": kind_ids[i], "name": kind.value},
            ),
        )
    op.add_column(
        "phonebook_association",
        sa.Column(
            "groupement_id",
            sa.Uuid(),
            nullable=False,
            server_default=str(kind_ids[0]),
        ),
    )
    op.create_index(
        op.f("ix_phonebook_association_groupement_id"),
        "phonebook_association",
        ["groupement_id"],
        unique=False,
    )
    op.create_foreign_key(
        "fk_phonebook_association_groupement_id",
        "phonebook_association",
        "phonebook_association_groupement",
        ["groupement_id"],
        ["id"],
    )
    for i, kind in enumerate(Kinds):
        op.execute(
            sa.update(association_table)
            .where(association_table.c.kind == kind.name)
            .values({"groupement_id": kind_ids[i]}),
        )
    op.drop_column("phonebook_association", "kind")
    sa.Enum(Kinds).drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(Kinds, name="kinds").create(op.get_bind())
    op.add_column(
        "phonebook_association",
        sa.Column(
            "kind",
            postgresql.ENUM(
                Kinds,
                name="kinds",
            ),
            server_default=Kinds.comity.name,
            nullable=False,
        ),
    )
    for i, kind in enumerate(Kinds):
        op.execute(
            sa.update(association_table)
            .where(association_table.c.groupement_id == kind_ids[i])
            .values({"kind": kind.name}),
        )
    op.drop_constraint(
        "fk_phonebook_association_groupement_id",
        "phonebook_association",
        type_="foreignkey",
    )
    op.drop_index(
        op.f("ix_phonebook_association_groupement_id"),
        table_name="phonebook_association",
    )
    op.drop_column("phonebook_association", "groupement_id")
    op.drop_index(
        op.f("ix_phonebook_association_groupement_name"),
        table_name="phonebook_association_groupement",
    )
    op.drop_table("phonebook_association_groupement")
    # ### end Alembic commands ###


association_ids = [str(uuid4()) for _ in range(len(Kinds))]


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    # Create the association table with the new groupement_id column
    for i, kind in enumerate(Kinds):
        alembic_runner.insert_into(
            "phonebook_association",
            {
                "id": association_ids[i],
                "name": kind.value,
                "kind": kind.name,
                "mandate_year": 2025,
                "description": None,
                "deactivated": False,
            },
        )


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    # Check that the groupement table has been created and populated
    result = alembic_connection.execute(
        sa.select(groupement_table.c.id, groupement_table.c.name),
    )
    groupements = {row[1]: row[0] for row in result}
    assert len(groupements) == len(Kinds)
    for i, kind in enumerate(Kinds):
        assert groupements[kind.value] == kind_ids[i]

    result = alembic_connection.execute(
        sa.select(
            association_table.c.id,
            association_table.c.groupement_id,
        ),
    )
    result_asso = [(row[0], row[1]) for row in result if row[0] in association_ids]
    for row in result_asso:
        kind = list(Kinds)[association_ids.index(row[0])]
        assert row[1] == groupements[kind.value], (
            f"Expected groupement_id for {kind.value} to be {groupements[kind.value]}, "
            f"but got {row[1]}"
        )
