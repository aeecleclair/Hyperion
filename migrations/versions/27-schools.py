"""schools

Create Date: 2024-10-26 19:04:51.089828
"""

import re
from collections.abc import Sequence
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "a1e6e8b52103"
down_revision: str | None = "53c163acf327"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

centrale_regex = r"^[\w\-.]*@(etu(-enise)?\.)?ec-lyon\.fr$"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "core_school",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email_regex", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    school_table = sa.Table(
        "core_school",
        sa.MetaData(),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email_regex", sa.String(), nullable=False),
    )
    user_table = sa.Table(
        "core_user",
        sa.MetaData(),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("school_id", sa.String(), nullable=False),
    )

    conn = op.get_bind()
    conn.execute(
        sa.insert(school_table).values(
            id="dce19aa2-8863-4c93-861e-fb7be8f610ed",
            name="no_school",
            email_regex=".*",
        ),
    )
    op.create_index(op.f("ix_core_school_id"), "core_school", ["id"], unique=False)
    op.create_index(op.f("ix_core_school_name"), "core_school", ["name"], unique=True)
    op.add_column(
        "core_user",
        sa.Column(
            "school_id",
            sa.String(),
            nullable=False,
            server_default="dce19aa2-8863-4c93-861e-fb7be8f610ed",
        ),
    )

    op.create_foreign_key(
        "core_user_school_id",
        "core_user",
        "core_school",
        ["school_id"],
        ["id"],
    )
    conn.execute(
        sa.insert(school_table).values(
            id="d9772da7-1142-4002-8b86-b694b431dfed",
            name="Centrale Lyon",
            email_regex=centrale_regex,
        ),
    )
    users = conn.execute(sa.select(user_table, user_table)).scalars().all()
    for user in users:
        if re.match(centrale_regex, user.email):
            conn.execute(
                user_table.update()
                .where(user_table.c.id == user.id)
                .values(school_id="d9772da7-1142-4002-8b86-b694b431dfed"),
            )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("core_user_school_id", "core_user", type_="foreignkey")
    op.drop_column("core_user", "school_id")
    op.drop_index(op.f("ix_core_school_name"), table_name="core_school")
    op.drop_index(op.f("ix_core_school_id"), table_name="core_school")
    op.drop_table("core_school")
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
