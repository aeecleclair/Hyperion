"""competition_volunteers

Create Date: 2025-09-20 03:33:27.563331
"""

from collections.abc import Sequence
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op

from app.types.sqlalchemy import TZDateTime

# revision identifiers, used by Alembic.
revision: str = "0064bf0a6f13"
down_revision: str | None = "0f66a87dc3ce"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "competition_volunteer_shift",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column("start_time", TZDateTime(), nullable=False),
        sa.Column("end_time", TZDateTime(), nullable=False),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("max_volunteers", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["edition_id"], ["competition_edition.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition_volunteer_registration",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("shift_id", sa.Uuid(), nullable=False),
        sa.Column("edition_id", sa.Uuid(), nullable=False),
        sa.Column("registered_at", TZDateTime(), nullable=False),
        sa.Column("validated", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["shift_id"], ["competition_volunteer_shift.id"]),
        sa.ForeignKeyConstraint(
            ["user_id", "edition_id"],
            ["competition_user.user_id", "competition_user.edition_id"],
            name="fk_volunteer_registration_user",
        ),
        sa.PrimaryKeyConstraint("user_id", "shift_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("competition_volunteer_registration")
    op.drop_table("competition_volunteer_shift")
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
