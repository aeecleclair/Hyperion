"""permissions

Create Date: 2025-03-10 21:30:48.890171
"""

from collections.abc import Sequence
from enum import Enum
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "1051d705419e"
down_revision: str | None = "e16b58cc6084"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


class AccountType(str, Enum):
    """
    Various account types that can be created in Hyperion.
    Each account type is associated with a set of permissions.
    """

    student = "student"
    former_student = "former_student"
    staff = "staff"
    association = "association"
    external = "external"
    other_school_student = "other_school_student"
    demo = "demo"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "core_permission_group",
        sa.Column("permission_name", sa.String(), nullable=False),
        sa.Column("group_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["core_group.id"]),
        sa.PrimaryKeyConstraint("permission_name", "group_id"),
    )
    op.create_index(
        op.f("ix_core_permission_group_group_id"),
        "core_permission_group",
        ["group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_core_permission_group_permission_name"),
        "core_permission_group",
        ["permission_name"],
        unique=False,
    )
    op.create_table(
        "core_permission_account_type",
        sa.Column("permission_name", sa.String(), nullable=False),
        sa.Column(
            "account_type",
            postgresql.ENUM(
                AccountType,
                name="accounttype",
                create_type=False,
            ),
            nullable=False,
        ),
    )
    op.create_index(
        op.f("ix_core_permission_account_type_account_type"),
        "core_permission_account_type",
        ["account_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_core_permission_account_type_permission_name"),
        "core_permission_account_type",
        ["permission_name"],
        unique=False,
    )
    op.drop_table("campaign_voter_groups")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "campaign_voter_groups",
        sa.Column("group_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("group_id", name="campaign_voter_groups_pkey"),
    )
    op.drop_index(
        op.f("ix_core_permission_permission_name"),
        table_name="core_permission_group",
    )
    op.drop_index(
        op.f("ix_core_permission_group_id"),
        table_name="core_permission_group",
    )
    op.drop_table("core_permission_group")
    op.drop_index(
        op.f("ix_core_permission_account_type_account_type"),
        table_name="core_permission_account_type",
    )
    op.drop_index(
        op.f("ix_core_permission_account_type_permission_name"),
        table_name="core_permission_account_type",
    )
    op.drop_table("core_permission_account_type")
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
