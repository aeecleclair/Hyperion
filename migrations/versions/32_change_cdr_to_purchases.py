"""change cdr to purchases

Create Date: 2024-10-14 09:25:38.714487
"""

from collections.abc import Sequence
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

import sqlalchemy as sa
from alembic import op

from app.types.sqlalchemy import TZDateTime

# revision identifiers, used by Alembic.
revision: str = "009c3095ee59"
down_revision: str | None = "e382ba1d64c2"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("cdr_ticket")
    op.drop_table("cdr_ticket_generator")
    op.rename_table("cdr_curriculum", "purchases_curriculum")
    op.rename_table("cdr_action", "purchases_action")
    op.rename_table("cdr_checkout", "purchases_checkout")
    op.rename_table("cdr_curriculum_membership", "purchases_curriculum_membership")
    op.rename_table("cdr_payment", "purchases_payment")
    op.drop_index("ix_cdr_payment_payment_type", table_name="purchases_payment")
    op.create_index(
        op.f("ix_purchases_payment_payment_type"),
        "purchases_payment",
        ["payment_type"],
        unique=False,
    )
    op.rename_table("cdr_seller", "purchases_seller")
    op.create_table(
        "ticket_generator",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("max_use", sa.Integer(), nullable=False),
        sa.Column("expiration", TZDateTime(), nullable=False),
        sa.Column("scanner_group_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["scanner_group_id"], ["core_group.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.rename_table("cdr_document", "purchases_document")
    op.rename_table("cdr_product", "purchases_product")
    op.create_table(
        "ticket",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("secret", sa.Uuid(), nullable=False),
        sa.Column("generator_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("scan_left", sa.Integer(), nullable=False),
        sa.Column("tags", sa.String(), nullable=False),
        sa.Column("expiration", TZDateTime(), nullable=False),
        sa.ForeignKeyConstraint(["generator_id"], ["ticket_generator.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["core_user.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("secret"),
    )
    op.rename_table("cdr_customdata_field", "purchases_customdata_field")
    op.rename_table("cdr_document_constraint", "purchases_document_constraint")
    op.rename_table("cdr_product_constraint", "purchases_product_constraint")
    op.rename_table("cdr_product_variant", "purchases_product_variant")
    op.rename_table("cdr_signature", "purchases_signature")
    op.drop_index("ix_cdr_signature_signature_type", table_name="purchases_signature")
    op.create_index(
        op.f("ix_purchases_signature_signature_type"),
        "purchases_signature",
        ["signature_type"],
        unique=False,
    )
    op.create_table(
        "purchases_ticket_generator",
        sa.Column("product_id", sa.Uuid(), nullable=False),
        sa.Column("generator_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["generator_id"], ["ticket_generator.id"]),
        sa.ForeignKeyConstraint(["product_id"], ["purchases_product.id"]),
        sa.PrimaryKeyConstraint("product_id", "generator_id"),
    )
    op.rename_table("cdr_allowed_curriculum", "purchases_allowed_curriculum")
    op.rename_table("cdr_customdata", "purchases_customdata")
    op.rename_table("cdr_purchase", "purchases_purchase")

    op.create_table(
        "purchases_checkout_paid_product",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("product_variant_id", sa.Uuid(), nullable=False),
        sa.Column("checkout_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["checkout_id"],
            ["purchases_checkout.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_variant_id"],
            ["purchases_product_variant.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["core_user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "product_variant_id"),
    )
    op.add_column(
        "purchases_product_variant",
        sa.Column("needs_validation", sa.Boolean(), nullable=False),
    )
    op.add_column("purchases_purchase", sa.Column("paid", sa.Boolean(), nullable=False))

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("purchases_checkout_paid_product")
    op.drop_column("purchases_product_variant", "needs_validation")
    op.drop_column("purchases_purchase", "paid")
    op.rename_table("purchases_product", "cdr_product")
    op.create_table(
        "cdr_ticket_generator",
        sa.Column("id", sa.CHAR(length=32), nullable=False),
        sa.Column("product_id", sa.CHAR(length=32), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.Column("max_use", sa.INTEGER(), nullable=False),
        sa.Column("expiration", sa.DATETIME(), nullable=False),
        sa.ForeignKeyConstraint(["product_id"], ["cdr_product.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "cdr_ticket",
        sa.Column("id", sa.CHAR(length=32), nullable=False),
        sa.Column("secret", sa.CHAR(length=32), nullable=False),
        sa.Column("product_variant_id", sa.CHAR(length=32), nullable=False),
        sa.Column("user_id", sa.VARCHAR(), nullable=False),
        sa.Column("scan_left", sa.INTEGER(), nullable=False),
        sa.Column("tags", sa.VARCHAR(), nullable=False),
        sa.Column("expiration", sa.DATETIME(), nullable=False),
        sa.Column("generator_id", sa.CHAR(length=32), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.ForeignKeyConstraint(
            ["generator_id"],
            ["cdr_ticket_generator.id"],
            name="ticket_generator",
        ),
        sa.ForeignKeyConstraint(["product_variant_id"], ["cdr_product_variant.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["core_user.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("secret", name="ticket_secret_unique"),
    )
    op.rename_table("purchases_curriculum", "cdr_curriculum")
    op.rename_table("purchases_action", "cdr_action")
    op.rename_table("purchases_checkout", "cdr_checkout")
    op.rename_table("purchases_curriculum_membership", "cdr_curriculum_membership")
    op.rename_table("purchases_payment", "cdr_payment")
    op.drop_index("ix_purchases_payment_payment_type", table_name="cdr_payment")
    op.create_index(
        "ix_cdr_payment_payment_type",
        "cdr_payment",
        ["payment_type"],
        unique=False,
    )
    op.rename_table("purchases_seller", "cdr_seller")
    op.rename_table("purchases_document", "cdr_document")
    op.rename_table("purchases_customdata_field", "cdr_customdata_field")
    op.rename_table("purchases_document_constraint", "cdr_document_constraint")
    op.rename_table("purchases_product_constraint", "cdr_product_constraint")
    op.rename_table("purchases_product_variant", "cdr_product_variant")
    op.rename_table("purchases_signature", "cdr_signature")
    op.drop_index(
        "ix_purchases_signature_signature_type",
        table_name="purchases_signature",
    )
    op.create_index(
        "ix_cdr_signature_signature_type",
        "cdr_signature",
        ["signature_type"],
        unique=False,
    )
    op.rename_table("purchases_allowed_curriculum", "cdr_allowed_curriculum")
    op.rename_table("purchases_customdata", "cdr_customdata")
    op.rename_table("purchases_purchase", "cdr_purchase")

    op.drop_table("purchases_ticket_generator")
    op.drop_table("ticket")
    op.drop_table("ticket_generator")
    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
