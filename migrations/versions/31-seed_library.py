"""seed_library

Create Date: 2025-02-26 15:59:02.427921
"""

from collections.abc import Sequence
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pytest_alembic import MigrationContext

from enum import Enum

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e382ba1d64c2"
down_revision: str | None = "ea30ad00bb01"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


class SpeciesType(Enum):
    aromatic = "Plantes aromatiques"
    vegetables = "Plantes potagères"
    interior = "Plante d intérieur"
    fruit = "Plantes fruitières"
    cactus = "Cactus et succulentes"
    ornamental = "Plantes ornementales"
    succulent = "Plantes grasses"
    other = "Autre"


class PlantState(Enum):
    waiting = "en attente"
    retrieved = "récupérée"
    used_up = "consommée"


class PropagationMethod(Enum):
    cutting = "bouture"
    seed = "graine"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # sa.Enum(PlantState, name="plantstate").create(op.get_bind())
    # sa.Enum(PropagationMethod, name="propagationmethod").create(op.get_bind())
    # sa.Enum(SpeciesType, name="speciestype").create(op.get_bind())

    op.create_table(
        "seed_library_species",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("prefix", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("difficulty", sa.Integer(), nullable=True),
        sa.Column("card", sa.String(), nullable=True),
        sa.Column("nb_seeds_recommended", sa.Integer(), nullable=True),
        sa.Column(
            "species_type",
            sa.Enum(
                SpeciesType,
                name="speciestype",
            ),
            nullable=True,
        ),
        sa.Column("start_season", sa.Date(), nullable=True),
        sa.Column("end_season", sa.Date(), nullable=True),
        sa.Column("time_maturation", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("prefix"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "seed_library_plants",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "state",
            sa.Enum(PlantState, name="plantstate"),
            nullable=False,
        ),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column(
            "propagation_method",
            sa.Enum(PropagationMethod, name="propagationmethod"),
            nullable=False,
        ),
        sa.Column("nb_seeds_envelope", sa.Integer(), nullable=True),
        sa.Column("reference", sa.String(), nullable=False),
        sa.Column("ancestor_id", sa.Uuid(), nullable=True),
        sa.Column("previous_note", sa.String(), nullable=True),
        sa.Column("current_note", sa.String(), nullable=True),
        sa.Column("borrower_id", sa.String(), nullable=True),
        sa.Column("confidential", sa.Boolean(), nullable=True),
        sa.Column("nickname", sa.String(), nullable=True),
        sa.Column("planting_date", sa.Date(), nullable=True),
        sa.Column("borrowing_date", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(["ancestor_id"], ["seed_library_plants.id"]),
        sa.ForeignKeyConstraint(["borrower_id"], ["core_user.id"]),
        sa.ForeignKeyConstraint(["species_id"], ["seed_library_species.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("reference"),
    )
    op.create_index(
        op.f("ix_seed_library_plants_borrower_id"),
        "seed_library_plants",
        ["borrower_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_seed_library_plants_state"),
        "seed_library_plants",
        ["state"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_seed_library_plants_state"),
        table_name="seed_library_plants",
    )
    op.drop_index(
        op.f("ix_seed_library_plants_borrower_id"),
        table_name="seed_library_plants",
    )
    op.drop_table("seed_library_plants")
    op.drop_table("seed_library_species")
    sa.Enum(PropagationMethod, name="propagationmethod").drop(op.get_bind())
    sa.Enum(SpeciesType, name="speciestype").drop(op.get_bind())
    sa.Enum(PlantState, name="plantstate").drop(op.get_bind())

    # ### end Alembic commands ###


def pre_test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass


def test_upgrade(
    alembic_runner: "MigrationContext",
    alembic_connection: sa.Connection,
) -> None:
    pass
