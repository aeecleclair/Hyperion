name: Build and Publish Hyperion Docker Images
on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out the code
        uses: actions/checkout@v5

      - name: Calculate requirements md5
        run: |
            echo "REQUIREMENTS_MD5=$(cat requirements-common.txt requirements-prod.txt | md5sum | cut -d ' ' -f 1)" >> $GITHUB_ENV
          
      - name: Check if base image exists
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
              -u ${{ secrets.DOCKER_REGISTRY_USERNAME }}:${{ secrets.DOCKER_REGISTRY_PASSWORD }} \
              -H "Accept: application/vnd.oci.image.index.v1+json" \
              "${{ secrets.DOCKER_REGISTRY_URL }}/v2/hyperion-base/manifests/${{ env.REQUIREMENTS_MD5 }}")
    
          echo "HTTP_CODE=$HTTP_CODE" >> $GITHUB_ENV
    
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "Error: Base image not found, wait for the base image to be built first"
            exit 1
          fi
    
          echo "EXISTS=true" >> $GITHUB_ENV

      - name: Docker metadata
        if: env.EXISTS == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_REGISTRY_IDENTIFER }}/hyperion
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Docker Buildx
        if: env.EXISTS == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: env.EXISTS == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push app
        if: env.EXISTS == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64 #,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REQUIREMENTS_MD5=${{env.REQUIREMENTS_MD5}}
            DOCKER_REGISTRY_IDENTIFER=${{ secrets.DOCKER_REGISTRY_IDENTIFER }}
