# Authorization using JWT #
ACCESS_TOKEN_SECRET_KEY = ""
RSA_PRIVATE_PEM_STRING = ""
AUTH_CLIENTS=[]

# Host or url of the instance of Hyperion
# This url will be especially used for oidc/oauth2 discovery endpoint and links send by email
# NOTE: A trailing / is required
CLIENT_URL = "http://127.0.0.1:8000/"

# Sometimes, when running third services with oidc inside Docker containers, and running Hyperion on your local device
# you may need to use a different url for call made from docker and call made from your device
# For exemple:
#   you will access the login page from your browser http://localhost:8000/auth/authorize
#   but the docker container should call http://host.docker.internal:8000/auth/token and not your localhost address
# NOTE: A trailing / is required
#OVERRIDDEN_CLIENT_URL_FOR_OIDC = "http://host.docker.internal:8000/"


# Logging configuration #
LOG_DEBUG_MESSAGES=true

# CORS_ORIGINS should be a list of urls allowed to make requests to the API
# It should begin with 'http://' or 'https:// and should never end with a '/'
CORS_ORIGINS=["http://localhost"]

# Matrix configuration #
#MATRIX_SERVER_BASE_URL = ""
#MATRIX_TOKEN = ""
#MATRIX_LOG_ERROR_ROOM_ID = ""
#MATRIX_LOG_AMAP_ROOM_ID = ""

# Google API configuration #
# Google API is used to upload files to Google Drive and generate PDF using App Script
# See ./app/utils/google_api/README.md for more information
#GOOGLE_API_CLIENT_ID = ""
#GOOGLE_API_CLIENT_SECRET =  ""

# Token to use the TMDB API
#THE_MOVIE_DB_API = ""

# SMTP configuration using starttls #
SMTP_ACTIVE = False
SMTP_PORT = 587
SMTP_SERVER = ""
SMTP_USERNAME = ""
SMTP_PASSWORD = ""
SMTP_EMAIL = ""

# Push notifications using Firebase Cloud Messaging
USE_FIREBASE=false

# Payment features using HelloAsso
# HelloAsso provide a sandbox to be able to realize tests
# HELLOASSO_API_BASE should have the format: `api.helloasso-sandbox.com`
#HELLOASSO_API_BASE = ""
#HELLOASSO_CLIENT_ID = ""
#HELLOASSO_CLIENT_SECRET = ""

CDR_PAYMENT_REDIRECTION_URL: str | None = None

# Redis configuration #
REDIS_HOST = "hyperion-redis" #May be left at "" during dev if you don't have a redis server running, in production it should be set to the name of the redis container
REDIS_PORT = 6379
REDIS_PASSWORD = "" #Should be commented during development to work with docker-compose-dev, and set in production
REDIS_LIMIT = 1000
REDIS_WINDOW = 60

# PostgreSQL configuration #
SQLITE_DB = "" # If set, the application use a SQLite database instead of PostgreSQL, for testing or development purposes (should not be used if possible)
POSTGRES_HOST = "hyperion-db" #Should be set to the name of the postgres container
POSTGRES_USER = ""
POSTGRES_PASSWORD = ""
POSTGRES_DB = ""
POSTGRES_TZ = "Etc/UTC"
DATABASE_DEBUG = False #If True, will print all SQL queries in the console

# Drive configuration for the raid registering app
RAID_DRIVE_REFRESH_TOKEN: str | None = None
RAID_DRIVE_API_KEY: str | None = None
RAID_DRIVE_CLIENT_ID: str | None = None
RAID_DRIVE_CLIENT_SECRET: str | None = None

RAID_PAYMENT_REDIRECTION_URL: str | None = None