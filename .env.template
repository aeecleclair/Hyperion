# Authorization using JWT #
ACCESS_TOKEN_SECRET_KEY = "YWZOHliiI53lJMJc5BI_WbGbA4GF2T7Wbt1airIhOXEa3c021c4-1c55-4182-b141-7778bcc8fac4"
RSA_PRIVATE_PEM_STRING = "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA1tpj3TZDkJakp2RygsM392pQbcmNBOGFT8FlETcRG/JVFT7k\niClJu+CVOJSVD0epfpYp93cYepfw74SezYnBCyuoLJ2yg5Qh4KlCrWmvwM7vhFIN\nx0xddIQi+Gm0T3dxGtv4Ga50TYX4SV4FE3ctJG9m3pyNF6POODp5tMJvShQWYTto\nW9qNhltZ8Z+14bq2INV/efpT47WuMT+VD/fa9/WwopAtgBcQOvq57fv5+DaPOIVR\n9BiP7F+pv+v6wQ373hI22QzCMsA4Whl+BmWFKcFoBDOBRjlW5VqhJWJkWZIRP0q+\nVAZHk2xJK+0YFc9jmaC+ExMtuyHYK0RnQK/8LQIDAQABAoIBABxJ8v4sZ+cAvrs/\nkYhAFf1gpShfck7jNr9SknEa1Aje9m7usf5vmULAhkVF4v55DAsb0HjB2JpDqTiQ\nOKyNZ7qFzAXb2aZTecZv4tScZsS3OngsqZ3FI0T1JPmaSWBxNJY5wkf3XV7btd5L\nH9X5ShtTA7Np33XuXneu01mGhEq3boLro+vfXMHV5QHyle1F4LUFWEqtP0UmZ5wA\nrro0Y7pA8R88tu5X4iWEjQPnAsbRixwFQ9LNMD8+40e1UIguobRySnP5umErHaIh\nKui7ZijLjbZh/dPS0IfpgahL1K6s9XhT3mD9WMvAvMkNtLewHIZZukG45mOQBrjF\nvvyYxoECgYEA+EY6YimGw0IKnUuf+5uZRXST7kDMENz1Flkcj8oZvo47hdX8/lDN\ni0y7gm3VNfHAK2R2KZPmSbtXA0DvS7kmx1/CFcmwkaakhuU5dyCHldWwSaTME3IE\nxjSZfTvlAiq9i6nUflgfkKo3Bdsiq8TYOUAv25S2SwYDH9Tx0fQwwGECgYEA3Ynt\nCHc8e4YRlGT65UQmEZ8cptmqVRyY4ClMU1xht7Pn0G1JwKRraiEL5/LndwscWf3h\nDygQuArJ28pp4d22FEW1LeXozXYUjJoz3anIA45IZ1OihS7Cx7tJB51/QNJeFdF4\nEX/XHaVukHyYSsAxkwCUYOw3cSgZOSEddL5Wf00CgYEA7JlIlDmMwtFR+jqSmJ3c\n//Kr8zZvAnb/Xa/IZ0MrK4yyLsYR1m48o06Ztx9iO4lKIFAZx1+563QL5P7hzOEC\nkqev90GA8hzD2AXksKEgdOrymAvjq3hSEm0YBN+qS1ldzxYmec0TL7L2wq7lqJnr\nkQuZUAG1g2OUYKZ3WSUDvKECgYEAv24NSkFuG/avfiD7w9xtYNCye2KekskROLG2\n6FltfsWQTEQDdNkekChaF2WHqRAKwaBlNymRuNZpsuhnMerZCQ9rDWwbDF86RnyA\n0MuCr7/kxJQ6XQcY/GnTIydu7F5bOlM0gzqKcW2f6m4fUohczf+0N0QmbDsQAJOi\n1lwadgkCgYEA3tkCBJIPTQecfjWiLqSocS6SrwXU+r3Jw6kI3/IB6ban/nsFdHSb\nnADST7f2zZatN6XALwsLU7f2R09R39ub0AJPyfToxo7MngR1rvaUYooF3rLlaU32\n8DqGvGpLkZkwbtcDmcX1zQoHjUo7RvoShZoapr59ihfrkiiEsXOkuGw=\n-----END RSA PRIVATE KEY-----\n"
AUTH_CLIENTS=[["5507cc3a-fd29-11ec-b939-0242ac120002", null, [], "AppAuthClient"],["Titan", null,["https://myecl.fr/static.html"], "AppAuthClient"]]

# Host or url of the instance of Hyperion
# This url will be especially used for oidc/oauth2 discovery endpoint and links send by email
# NOTE: A trailing / is required
CLIENT_URL = "http://127.0.0.1:8000/"

# Sometimes, when running third services with oidc inside Docker containers, and running Hyperion on your local device
# you may need to use a different url for call made from docker and call made from your device
# For exemple:
#   you will access the login page from your browser http://localhost:8000/auth/authorize
#   but the docker container should call http://host.docker.internal:8000/auth/token and not your localhost address
# NOTE: A trailing / is required
#OVERRIDDEN_CLIENT_URL_FOR_OIDC = "http://host.docker.internal:8000/"


# Logging configuration #
LOG_DEBUG_MESSAGES=true

# CORS_ORIGINS should be a list of urls allowed to make requests to the API
# It should begin with 'http://' or 'https:// and should never end with a '/'
CORS_ORIGINS=["*"]

# Matrix configuration #
#MATRIX_SERVER_BASE_URL = ""
#MATRIX_TOKEN = ""
#MATRIX_LOG_ERROR_ROOM_ID = ""
#MATRIX_LOG_AMAP_ROOM_ID = ""

# Google API configuration #
# Google API is used to upload files to Google Drive and generate PDF using App Script
# See ./app/utils/google_api/README.md for more information
#GOOGLE_API_CLIENT_ID = ""
#GOOGLE_API_CLIENT_SECRET =  ""

# Token to use the TMDB API
#THE_MOVIE_DB_API = ""

# SMTP configuration using starttls #
SMTP_ACTIVE = False
SMTP_PORT = 587
SMTP_SERVER = ""
SMTP_USERNAME = ""
SMTP_PASSWORD = ""
SMTP_EMAIL = ""

# Push notifications using Firebase Cloud Messaging
USE_FIREBASE=false

# Payment features using HelloAsso
# HelloAsso provide a sandbox to be able to realize tests
# HELLOASSO_API_BASE should have the format: `api.helloasso-sandbox.com`
# HelloAsso only allow 20 simultaneous active access token. Note that each Hyperion worker will need its own access token.
#HELLOASSO_API_BASE = ""
#HELLOASSO_CLIENT_ID = ""
#HELLOASSO_CLIENT_SECRET = ""
# Main slug of the HelloAsso account
#HELLOASSO_SLUG = ""
#HELLOASSO_MYECLPAY_SLUG = ""

TRUSTED_PAYMENT_REDIRECT_URLS = []

CDR_PAYMENT_REDIRECTION_URL: str | None
MYECLPAY_MAXIMUM_WALLET_BALANCE: int | None
#MYECLPAY_DATA_VERIFIER_ACCESS_TOKEN = ""

# S3 configuration for file storage
#S3_BUCKET_NAME = "hyperion"
#S3_ACCESS_KEY_ID = "realaccesskey"
#S3_SECRET_ACCESS_KEY = "realsecretkey"

# Redis configuration #
REDIS_HOST = "" #May be left at "" during dev if you don't have a redis server running, in production it should be set to the name of the redis container
REDIS_PORT = 6379
REDIS_PASSWORD = "" #Should be commented during development to work with docker-compose-dev, and set in production
REDIS_LIMIT = 1000
REDIS_WINDOW = 60

# PostgreSQL configuration #
SQLITE_DB = "sql_app.db" # If set, the application use a SQLite database instead of PostgreSQL, for testing or development purposes (should not be used if possible)
POSTGRES_HOST = "hyperion-db" #Should be set to the name of the postgres container
POSTGRES_USER = ""
POSTGRES_PASSWORD = ""
POSTGRES_DB = ""
POSTGRES_TZ = "Etc/UTC"
DATABASE_DEBUG = False #If True, will print all SQL queries in the console
FACTORIES = True #If True, will use factories to populate the database with fake data

# Drive configuration for the raid registering app
RAID_DRIVE_REFRESH_TOKEN: str | None = None
RAID_DRIVE_API_KEY: str | None = None
RAID_DRIVE_CLIENT_ID: str | None = None
RAID_DRIVE_CLIENT_SECRET: str | None = None

RAID_PAYMENT_REDIRECTION_URL: str | None = None
